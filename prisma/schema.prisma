generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id               String         @id
  email            String
  fullName         String?
  firstName        String?
  lastName         String?
  avatarUrl        String?
  accountType      AccountType    @default(INDIVIDUAL)
  companyName      String?
  phone            String?
  website          String?
  address          String?
  city             String?
  state            String?
  country          String?
  postalCode       String?
  stripeCustomerId String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  analytics        Analytics[]
  catalogues       Catalogue[]
  couponUsages     CouponUsage[]
  exports          Export[]
  subscriptions    Subscription[]
  teamMemberships  TeamMember[]
  sentInvitations  Invitation[]   @relation("InvitationSender")
  receivedInvitations Invitation[] @relation("InvitationReceiver")
  themeAnalytics   ThemeAnalytics[]

  @@map("profiles")
}

model Catalogue {
  id             String          @id @default(uuid())
  name           String
  description    String?
  theme          String          @default("modern")
  isPublic       Boolean         @default(false)
  slug           String?         @unique
  status         CatalogueStatus @default(DRAFT)
  settings       Json?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  publishedAt    DateTime?
  profileId      String
  customDomain   String?
  exportCount    Int             @default(0)
  seoDescription String?
  seoTitle       String?
  viewCount      Int             @default(0)
  analytics      Analytics[]
  profile        Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  categories     Category[]
  exports        Export[]
  products       Product[]
  teamMembers    TeamMember[]
  invitations    Invitation[]
  themeAnalytics ThemeAnalytics[]

  @@map("catalogues")
}

model Product {
  id           String    @id @default(uuid())
  name         String
  description  String?
  price        Decimal?  @db.Decimal(10, 2)
  currency     String    @default("USD")
  sku          String?
  images       String[]
  tags         String[]
  isActive     Boolean   @default(true)
  sortOrder    Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  catalogueId  String
  categoryId   String?
  priceDisplay String    @default("show")
  imageUrl     String?
  catalogue    Catalogue @relation(fields: [catalogueId], references: [id], onDelete: Cascade)
  category     Category? @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  color       String?
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  catalogueId String
  catalogue   Catalogue @relation(fields: [catalogueId], references: [id], onDelete: Cascade)
  products    Product[]

  @@map("categories")
}

model Coupon {
  id                   String         @id @default(uuid())
  code                 String         @unique
  name                 String
  description          String?
  type                 CouponType
  value                Decimal        @db.Decimal(10, 2)
  currency             String         @default("USD")
  isActive             Boolean        @default(true)
  isPublic             Boolean        @default(false)
  limitTotal           Int?
  limitPerCustomer     Int            @default(1)
  usedCount            Int            @default(0)
  allowedBillingCycles BillingCycle[]
  validFrom            DateTime       @default(now())
  validUntil           DateTime?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  usages               CouponUsage[]
  subscriptions        Subscription[]

  @@map("coupons")
}

model CouponUsage {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  usedAt         DateTime      @default(now())
  ipAddress      String?
  userAgent      String?
  couponId       String
  profileId      String
  subscriptionId String?
  coupon         Coupon        @relation(fields: [couponId], references: [id], onDelete: Cascade)
  profile        Profile       @relation(fields: [profileId], references: [id], onDelete: Cascade)
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])

  @@unique([couponId, profileId])
  @@map("coupon_usages")
}

model Subscription {
  id                   String             @id @default(uuid())
  stripeSubscriptionId String?            @unique
  stripeCustomerId     String?
  stripePriceId        String?
  plan                 SubscriptionPlan   @default(FREE)
  status               SubscriptionStatus @default(ACTIVE)
  billingCycle         BillingCycle       @default(MONTHLY)
  amount               Decimal            @db.Decimal(10, 2)
  currency             String             @default("USD")
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  canceledAt           DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  profileId            String
  couponId             String?
  trialEnd             DateTime?
  couponUsages         CouponUsage[]
  coupon               Coupon?            @relation(fields: [couponId], references: [id])
  profile              Profile            @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model PlanFeature {
  id                      String           @id @default(uuid())
  plan                    SubscriptionPlan @unique
  name                    String
  description             String?
  monthlyPrice            Decimal          @db.Decimal(10, 2)
  yearlyPrice             Decimal          @db.Decimal(10, 2)
  currency                String           @default("USD")
  maxCatalogues           Int              @default(-1)
  maxProductsPerCatalogue Int              @default(-1)
  maxCategories           Int              @default(-1)
  maxExportsPerMonth      Int              @default(-1)
  maxStorageGB            Int              @default(-1)
  hasCustomDomain         Boolean          @default(false)
  hasAdvancedAnalytics    Boolean          @default(false)
  hasWhiteLabel           Boolean          @default(false)
  hasPrioritySupport      Boolean          @default(false)
  hasAPIAccess            Boolean          @default(false)
  hasCustomBranding       Boolean          @default(false)
  hasAdvancedExports      Boolean          @default(false)
  hasTeamCollaboration    Boolean          @default(false)
  hasAdvancedSEO          Boolean          @default(false)
  hasCustomThemes         Boolean          @default(false)
  isActive                Boolean          @default(true)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt

  @@map("plan_features")
}

model Export {
  id          String       @id @default(uuid())
  type        ExportType   @default(PDF)
  status      ExportStatus @default(PENDING)
  fileUrl     String?
  filePath    String?
  fileName    String?
  fileSize    Int?
  metadata    Json?
  error       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  completedAt DateTime?
  profileId   String
  catalogueId String
  catalogue   Catalogue    @relation(fields: [catalogueId], references: [id], onDelete: Cascade)
  profile     Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("exports")
}

model Analytics {
  id          String         @id @default(uuid())
  event       AnalyticsEvent
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  country     String?
  createdAt   DateTime       @default(now())
  profileId   String?
  catalogueId String?
  catalogue   Catalogue?     @relation(fields: [catalogueId], references: [id])
  profile     Profile?       @relation(fields: [profileId], references: [id])

  @@map("analytics")
}

model WebhookEvent {
  id          String        @id @default(uuid())
  source      WebhookSource
  eventType   String
  data        Json
  processed   Boolean       @default(false)
  error       String?
  attempts    Int           @default(0)
  maxAttempts Int           @default(3)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  processedAt DateTime?

  @@map("webhook_events")
}

model TeamMember {
  id          String    @id @default(uuid())
  role        TeamRole  @default(MEMBER)
  joinedAt    DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  catalogueId String
  profileId   String
  catalogue   Catalogue @relation(fields: [catalogueId], references: [id], onDelete: Cascade)
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([catalogueId, profileId])
  @@map("team_members")
}

model Invitation {
  id          String           @id @default(uuid())
  email       String
  token       String           @unique
  role        TeamRole         @default(MEMBER)
  status      InvitationStatus @default(PENDING)
  expiresAt   DateTime
  acceptedAt  DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  catalogueId String
  senderId    String
  receiverId  String?
  catalogue   Catalogue        @relation(fields: [catalogueId], references: [id], onDelete: Cascade)
  sender      Profile          @relation("InvitationSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    Profile?         @relation("InvitationReceiver", fields: [receiverId], references: [id], onDelete: SetNull)

  @@unique([catalogueId, email])
  @@map("invitations")
}

model ThemeAnalytics {
  id          String    @id @default(uuid())
  themeId     String
  themeName   String
  catalogueId String
  profileId   String
  selectedAt  DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  catalogue   Catalogue @relation(fields: [catalogueId], references: [id], onDelete: Cascade)
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("theme_analytics")
}

enum AccountType {
  INDIVIDUAL
  BUSINESS
}

enum CatalogueStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum SubscriptionPlan {
  FREE
  STANDARD
  PROFESSIONAL
  BUSINESS
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
}

enum ExportType {
  PDF
  HTML
  JSON
}

enum ExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum AnalyticsEvent {
  CATALOGUE_CREATED
  CATALOGUE_PUBLISHED
  PRODUCT_ADDED
  PDF_EXPORT
  EXPORT_GENERATED
  COUPON_USED
  SUBSCRIPTION_CREATED
  SUBSCRIPTION_CANCELED
  PAGE_VIEW
  USER_SIGNUP
  USER_LOGIN
}

enum WebhookSource {
  STRIPE
  SUPABASE
  INTERNAL
}

enum TeamRole {
  OWNER
  MEMBER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}
